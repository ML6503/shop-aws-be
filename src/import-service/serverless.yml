  service: import-service-cyprushandmade

  custom:
    region: eu-west-1
    bucketName: import-service-cyprushandmade
    queueName: catalogItemsQueue
    topicName: createProductTopic
    dlqName: productDLQ

  provider:
      name: aws
      runtime: nodejs14.x
      stage: dev 
      region: ${self:custom.region}
      lambdaHashingVersion: 20201221

  environment:
    SQS_QUEUE_URL:
      Ref: SQSQueue
    
  resources:
    Resources:
      SQSQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName: ${self:custom.queueName}

      ProductTopic:
        Type: AWS::SNS::Topic
        Properties:
          TopicName: ${self:custom.topicName}

      ${self:custom.dlqName}:
        Type: AWS::SQS:Queue
        Poperties:
          QueueName: ${self:custom.dlqName}

  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:ListBucket"
        Resource:
          - arn:aws:s3:::${self:custom.bucketName}

      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource:
          - arn:aws:s3:::${self:custom.bucketName}/*
      - Effect: Allow
          Action:
            - sqs:*
          Resource:
            Fn::GetAtt: [ ${self:custom.queueName}, Arn ]

  functions:
      importProductsFile:
          handler: handler.importProductsFile
          events:
            - http:
                method: get
                path: import
                cors: true
                request:
                  parameters:
                    querystrings:
                      name: true

      importFileParser:
          handler: handler.importFileParser
          events:
            - s3:
                bucket: import-service-cyprushandmade
                event: s3:ObjectCreated:*
                rules:
                    - prefix: uploaded/
                existing: true
            
      
      catalogBatchProcess:
          handler: handler.catalogBatchProcess
          events:
            - sqs:
            arn: arn:aws:sqs:region:${self:custom.region}:${self:custom.queueName}
            batchSize: 5

            # get called every time a message is sent to the queue 
            - sqs:
                arn:
                  Fn::GetAtt:
                    - ${self:custom.queueName}
                    - Arn
            # get triggerred for message sent to createProduct Topic
            - sns:
              arn: !Ref ProductTopic
              topicName: ${self:custom.queueName}
              displayName: New product data to create product
              filterPolicy:
                blade:
                  - knife
                  - dagger
              redrivePolicy: 
                deadLetterTargetArn: arn:aws:sqs:${self:custom.region}:11111111111:${self:custom.dlqName}
